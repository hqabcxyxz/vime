snippet head "python文件开头" b
# -*- coding: utf-8 -*-
'''
@Author: CaptainHu
@Date: `date`
@Description: ${1}
'''

endsnippet

snippet beautify_xml_root "美化xml的节点,直接在原节点上改" b
def beautify_xml_root(elem,level=0):
    r'''美化xml的节点,直接在原节点上改

    Parameters
    ----------
    elem : (ET.Element)
        xml的节点,一般是最顶级的节点

    level : (int = 0)
        节点的等级,默认为0,最顶级节点

    Examples:
    ----------
        root=ET.Element('annotation')
        beautify_xml_root(root)
        ET.dump(root)
    '''
    i='\r\n'+level*'\t'
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text=i+'\t'
        if not elem.tail or not elem.tail.strip():
            elem.tail=i
        if level ==0:
            elem.tail=''
        for elem in elem:
            beautify_xml_root(elem,level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail =i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail=i

endsnippet

snippet timeblock "计算代码块运行时间" b
@contextmanager
def timeblock(label:str = '\033[1;34m${1:Spend time}:\033[0m'):
    r'''上下文管理测试代码块运行时间,需要
        import time
        from contextlib import contextmanager
    '''
    start = time.perf_counter()
    try:
        yield
    finally:
        end = time.perf_counter()
        print('\033[1;34m{} : {}\033[0m'.format(label, end - start))
endsnippet

snippet timefunc "计算函数运行时间" b
def timethis(func):
    r'''装饰器用于测试函数时间,需要
        import time
        from functools import wraps

    Examples
    ----------
        @timethis
        def my_func():
            ....
    '''
    @wraps(func)
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        r = func(*args, **kwargs)
        end = time.perf_counter()
        print('{}.{} : {}'.format(func.__module__, func.__name__, end - start))
        return r
    return wrapper
endsnippet

snippet flattenlist "将多维列表展开成一维" b
flatten = lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]
endsnippet

snippet get_all_file_path "获得特定目录下所有的文件的路径列表" b
def get_all_${1:file}_path(${2:file_dir}:str,filter_:tuple=(${3:'.jpg'},)) -> list:
    #遍历文件夹下所有的${1:file}
    return [os.path.join(maindir,filename) for maindir,_,file_name_list in os.walk(${2:file_dir}) \
            for filename in file_name_list \
            if os.path.splitext(filename)[1] in filter_ ]
endsnippet

snippet if__name__ "添加if __name__ == '__main__'" b
if __name__=="__main__":
    ${1:function}
endsnippet

snippet md5sum "计算字符串或者文件的md5" b
def md5sum(count_str:str) -> str:
    m = hashlib.md5()
    if os.path.isfile(count_str):
        with open(count_str,'rb') as frb:
            m.update(frb.read())
    else:
        m.update(count_str.encode('utf-8'))
    return m.hexdigest()
endsnippet

snippet cvdebug "添加一些用来debug图片或者丈量的函数" b
import matplotlib.pyplot as plt

def pdb_show_img(img):
    plt.imshow(img)
    plt.show()

endsnippet

snippet ignore "用于指示pyright取消对某行的检查" i
# type: ignore
endsnippet

snippet get_debug "从gist 下载debug模块" b
`#!/bin/bash
wget -nc https://gist.githubusercontent.com/captainfffsama/4918458f967f5e64a52f686047b72e23/raw/63ccce736be4783e641cd357a3810198d24feb2b/debug_tools.py`
endsnippet

snippet parse_args "常用的用来解析模型参数的" b
def parse_args():
    parser = argparse.ArgumentParser(description="train args set")
    parser.add_argument("--checkpoint",
                        type=str,
                        default="~/torch_hub_ckpt/resnet18-f37072fd.pth",
                        help='')
    parser.add_argument("--batch_size", type=int, default=4)
    parser.add_argument("--data_dir",
                        type=str,
                        default="/data/indoor_meter/model_test1")
    parser.add_argument("--lr", type=float, default=3e-4)
    parser.add_argument("--epochs", type=int, default=50)
    parser.add_argument("--save_dir",
                        type=str,
                        default="/data/experiments_data/point_weight")
    args = parser.parse_args()
    return args
endsnippet

snippet Singleton "单例元类" b
# NOTE: 进程安全,进程独立,但是线程不独立,不是线程安全的
# 这里是一个强引用,不会被GC回收..若是用于一些特殊的资源类,换成弱引用
class Singleton(type):
    def __init__(cls, *args, **kwargs):
        super().__init__(*args, **kwargs)
        cls.__instance = None

    def __call__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__call__(*args, **kwargs)
            return cls.__instance
        else:
            if kwargs and hasattr(cls.__instance, "_reinit"):
                cls.__instance._reinit(**kwargs)
            return cls.__instance
endsnippet

snippet setup "setup.py 示例" b
from setuptools import setup, find_packages


def parse_requirements(fname='requirements.txt', with_version=True):
    """Parse the package dependencies listed in a requirements file but strips
    specific versioning information.
    Args:
        fname (str): path to requirements file
        with_version (bool, default=False): if True include version specs
    Returns:
        List[str]: list of requirements items
    CommandLine:
        python -c "import setup; print(setup.parse_requirements())"
    """
    import re
    import sys
    from os.path import exists
    require_fpath = fname

    def parse_line(line):
        """Parse information from a line in a requirements text file."""
        if line.startswith('-r '):
            # Allow specifying requirements in other files
            target = line.split(' ')[1]
            for info in parse_require_file(target):
                yield info
        else:
            info = {'line': line}
            if line.startswith('-e '):
                info['package'] = line.split('#egg=')[1]
            elif '@ git+' in line:
                info['package'] = line
            else:
                # Remove versioning from the package
                pat = '(' + '|'.join(['>=', '==', '>']) + ')'
                parts = re.split(pat, line, maxsplit=1)
                parts = [p.strip() for p in parts]

                info['package'] = parts[0]
                if len(parts) > 1:
                    op, rest = parts[1:]
                    if ';' in rest:
                        # Handle platform specific dependencies
                        # http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies
                        version, platform_deps = map(str.strip,
                                                     rest.split(';'))
                        info['platform_deps'] = platform_deps
                    else:
                        version = rest  # NOQA
                    info['version'] = (op, version)
            yield info

    def parse_require_file(fpath):
        with open(fpath, 'r') as f:
            for line in f.readlines():
                line = line.strip()
                if line and not line.startswith('#'):
                    for info in parse_line(line):
                        yield info

    def gen_packages_items():
        if exists(require_fpath):
            for info in parse_require_file(require_fpath):
                parts = [info['package']]
                if with_version and 'version' in info:
                    parts.extend(info['version'])
                if not sys.version.startswith('3.4'):
                    # apparently package_deps are broken in 3.4
                    platform_deps = info.get('platform_deps')
                    if platform_deps is not None:
                        parts.append(';' + platform_deps)
                item = ''.join(parts)
                yield item

    packages = list(gen_packages_items())
    return packages

setup(
    name=${1:"kp2d_grpc"},
    version=${2:'v1.0'},
    description=${3:'use kp2d though grpc'},
    author='captainfffsama',
    author_email='tuanzhangsama@outlook.com',
    packages=find_packages(),
    include_package_data=True,
    license=${4:'MIT License'},
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
    ],
    install_requires=parse_requirements('requirements.txt'),
)
endsnippet

snippet parsexml "解析VOC xml" b
def parse_xml_info(xml_path):
	''' 解析xml文件信息
	解析出的xml信息包含2类：
	第一类是图像信息：图像名图像宽高,通道数
	第二类是包含的目标信息：目标类别和每类目标所有bbx的位置
	Args:
		xml_path:xml文件路径
	Return
		img_info: [list], [img_name, W, H, C]
		obj_info: [dict], {obj_name1: [[xmin,ymin,xmax,ymax], [xmin,ymin,xmax,ymax], ...], obj_name2: ...}
	'''
	assert os.path.exists(xml_path), "{0} does not exist!".format(xml_path)

	tree = ET.parse(xml_path)
	root = tree.getroot()
	img_name = root.find('filename').text
	img_width = int(root.find('size/width').text)
	img_height = int(root.find('size/height').text)
	img_depth = int(root.find('size/depth').text)
	img_info = [img_name, img_width, img_height, img_depth]

	obj_info = {}
	for obj in root.findall('object'):
		obj_name = obj.find('name').text
		xmin = int(obj.find('bndbox/xmin').text)
		ymin = int(obj.find('bndbox/ymin').text)
		xmax = int(obj.find('bndbox/xmax').text)
		ymax = int(obj.find('bndbox/ymax').text)

		if obj_name not in obj_info.keys():
			obj_info[obj_name] = []
		obj_info[obj_name].append((xmin, ymin, xmax, ymax))

	return img_info, obj_info
endsnippet

